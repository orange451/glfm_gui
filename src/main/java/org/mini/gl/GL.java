package org.mini.gl;
/*this file generated by GL_h_2_java.java ,dont modify it manual.*/
public class GL {
    public static final int GL_DEPTH_BUFFER_BIT = 0x00000100;
    public static final int GL_STENCIL_BUFFER_BIT = 0x00000400;
    public static final int GL_COLOR_BUFFER_BIT = 0x00004000;
    public static final int GL_FALSE = 0;
    public static final int GL_TRUE = 1;
    public static final int GL_POINTS = 0x0000;
    public static final int GL_LINES = 0x0001;
    public static final int GL_LINE_LOOP = 0x0002;
    public static final int GL_LINE_STRIP = 0x0003;
    public static final int GL_TRIANGLES = 0x0004;
    public static final int GL_TRIANGLE_STRIP = 0x0005;
    public static final int GL_TRIANGLE_FAN = 0x0006;
    public static final int GL_ZERO = 0;
    public static final int GL_ONE = 1;
    public static final int GL_SRC_COLOR = 0x0300;
    public static final int GL_ONE_MINUS_SRC_COLOR = 0x0301;
    public static final int GL_SRC_ALPHA = 0x0302;
    public static final int GL_ONE_MINUS_SRC_ALPHA = 0x0303;
    public static final int GL_DST_ALPHA = 0x0304;
    public static final int GL_ONE_MINUS_DST_ALPHA = 0x0305;
    public static final int GL_DST_COLOR = 0x0306;
    public static final int GL_ONE_MINUS_DST_COLOR = 0x0307;
    public static final int GL_SRC_ALPHA_SATURATE = 0x0308;
    public static final int GL_FUNC_ADD = 0x8006;
    public static final int GL_BLEND_EQUATION = 0x8009;
    public static final int GL_BLEND_EQUATION_RGB = 0x8009;
    public static final int GL_BLEND_EQUATION_ALPHA = 0x883D;
    public static final int GL_FUNC_SUBTRACT = 0x800A;
    public static final int GL_FUNC_REVERSE_SUBTRACT = 0x800B;
    public static final int GL_BLEND_DST_RGB = 0x80C8;
    public static final int GL_BLEND_SRC_RGB = 0x80C9;
    public static final int GL_BLEND_DST_ALPHA = 0x80CA;
    public static final int GL_BLEND_SRC_ALPHA = 0x80CB;
    public static final int GL_CONSTANT_COLOR = 0x8001;
    public static final int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
    public static final int GL_CONSTANT_ALPHA = 0x8003;
    public static final int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
    public static final int GL_BLEND_COLOR = 0x8005;
    public static final int GL_ARRAY_BUFFER = 0x8892;
    public static final int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
    public static final int GL_ARRAY_BUFFER_BINDING = 0x8894;
    public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
    public static final int GL_STREAM_DRAW = 0x88E0;
    public static final int GL_STATIC_DRAW = 0x88E4;
    public static final int GL_DYNAMIC_DRAW = 0x88E8;
    public static final int GL_BUFFER_SIZE = 0x8764;
    public static final int GL_BUFFER_USAGE = 0x8765;
    public static final int GL_CURRENT_VERTEX_ATTRIB = 0x8626;
    public static final int GL_FRONT = 0x0404;
    public static final int GL_BACK = 0x0405;
    public static final int GL_FRONT_AND_BACK = 0x0408;
    public static final int GL_TEXTURE_2D = 0x0DE1;
    public static final int GL_CULL_FACE = 0x0B44;
    public static final int GL_BLEND = 0x0BE2;
    public static final int GL_DITHER = 0x0BD0;
    public static final int GL_STENCIL_TEST = 0x0B90;
    public static final int GL_DEPTH_TEST = 0x0B71;
    public static final int GL_SCISSOR_TEST = 0x0C11;
    public static final int GL_POLYGON_OFFSET_FILL = 0x8037;
    public static final int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
    public static final int GL_SAMPLE_COVERAGE = 0x80A0;
    public static final int GL_NO_ERROR = 0;
    public static final int GL_INVALID_ENUM = 0x0500;
    public static final int GL_INVALID_VALUE = 0x0501;
    public static final int GL_INVALID_OPERATION = 0x0502;
    public static final int GL_OUT_OF_MEMORY = 0x0505;
    public static final int GL_CW = 0x0900;
    public static final int GL_CCW = 0x0901;
    public static final int GL_LINE_WIDTH = 0x0B21;
    public static final int GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
    public static final int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
    public static final int GL_CULL_FACE_MODE = 0x0B45;
    public static final int GL_FRONT_FACE = 0x0B46;
    public static final int GL_DEPTH_RANGE = 0x0B70;
    public static final int GL_DEPTH_WRITEMASK = 0x0B72;
    public static final int GL_DEPTH_CLEAR_VALUE = 0x0B73;
    public static final int GL_DEPTH_FUNC = 0x0B74;
    public static final int GL_STENCIL_CLEAR_VALUE = 0x0B91;
    public static final int GL_STENCIL_FUNC = 0x0B92;
    public static final int GL_STENCIL_FAIL = 0x0B94;
    public static final int GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
    public static final int GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
    public static final int GL_STENCIL_REF = 0x0B97;
    public static final int GL_STENCIL_VALUE_MASK = 0x0B93;
    public static final int GL_STENCIL_WRITEMASK = 0x0B98;
    public static final int GL_STENCIL_BACK_FUNC = 0x8800;
    public static final int GL_STENCIL_BACK_FAIL = 0x8801;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
    public static final int GL_STENCIL_BACK_REF = 0x8CA3;
    public static final int GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
    public static final int GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
    public static final int GL_VIEWPORT = 0x0BA2;
    public static final int GL_SCISSOR_BOX = 0x0C10;
    public static final int GL_COLOR_CLEAR_VALUE = 0x0C22;
    public static final int GL_COLOR_WRITEMASK = 0x0C23;
    public static final int GL_UNPACK_ALIGNMENT = 0x0CF5;
    public static final int GL_PACK_ALIGNMENT = 0x0D05;
    public static final int GL_MAX_TEXTURE_SIZE = 0x0D33;
    public static final int GL_MAX_VIEWPORT_DIMS = 0x0D3A;
    public static final int GL_SUBPIXEL_BITS = 0x0D50;
    public static final int GL_RED_BITS = 0x0D52;
    public static final int GL_GREEN_BITS = 0x0D53;
    public static final int GL_BLUE_BITS = 0x0D54;
    public static final int GL_ALPHA_BITS = 0x0D55;
    public static final int GL_DEPTH_BITS = 0x0D56;
    public static final int GL_STENCIL_BITS = 0x0D57;
    public static final int GL_POLYGON_OFFSET_UNITS = 0x2A00;
    public static final int GL_POLYGON_OFFSET_FACTOR = 0x8038;
    public static final int GL_TEXTURE_BINDING_2D = 0x8069;
    public static final int GL_SAMPLE_BUFFERS = 0x80A8;
    public static final int GL_SAMPLES = 0x80A9;
    public static final int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
    public static final int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
    public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
    public static final int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
    public static final int GL_DONT_CARE = 0x1100;
    public static final int GL_FASTEST = 0x1101;
    public static final int GL_NICEST = 0x1102;
    public static final int GL_GENERATE_MIPMAP_HINT = 0x8192;
    public static final int GL_BYTE = 0x1400;
    public static final int GL_UNSIGNED_BYTE = 0x1401;
    public static final int GL_SHORT = 0x1402;
    public static final int GL_UNSIGNED_SHORT = 0x1403;
    public static final int GL_INT = 0x1404;
    public static final int GL_UNSIGNED_INT = 0x1405;
    public static final int GL_FLOAT = 0x1406;
    public static final int GL_FIXED = 0x140C;
    public static final int GL_DEPTH_COMPONENT = 0x1902;
    public static final int GL_ALPHA = 0x1906;
    public static final int GL_RGB = 0x1907;
    public static final int GL_RGBA = 0x1908;
    public static final int GL_LUMINANCE = 0x1909;
    public static final int GL_LUMINANCE_ALPHA = 0x190A;
    public static final int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
    public static final int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
    public static final int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
    public static final int GL_FRAGMENT_SHADER = 0x8B30;
    public static final int GL_VERTEX_SHADER = 0x8B31;
    public static final int GL_MAX_VERTEX_ATTRIBS = 0x8869;
    public static final int GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
    public static final int GL_MAX_VARYING_VECTORS = 0x8DFC;
    public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
    public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
    public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
    public static final int GL_SHADER_TYPE = 0x8B4F;
    public static final int GL_DELETE_STATUS = 0x8B80;
    public static final int GL_LINK_STATUS = 0x8B82;
    public static final int GL_VALIDATE_STATUS = 0x8B83;
    public static final int GL_ATTACHED_SHADERS = 0x8B85;
    public static final int GL_ACTIVE_UNIFORMS = 0x8B86;
    public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
    public static final int GL_ACTIVE_ATTRIBUTES = 0x8B89;
    public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
    public static final int GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
    public static final int GL_CURRENT_PROGRAM = 0x8B8D;
    public static final int GL_NEVER = 0x0200;
    public static final int GL_LESS = 0x0201;
    public static final int GL_EQUAL = 0x0202;
    public static final int GL_LEQUAL = 0x0203;
    public static final int GL_GREATER = 0x0204;
    public static final int GL_NOTEQUAL = 0x0205;
    public static final int GL_GEQUAL = 0x0206;
    public static final int GL_ALWAYS = 0x0207;
    public static final int GL_KEEP = 0x1E00;
    public static final int GL_REPLACE = 0x1E01;
    public static final int GL_INCR = 0x1E02;
    public static final int GL_DECR = 0x1E03;
    public static final int GL_INVERT = 0x150A;
    public static final int GL_INCR_WRAP = 0x8507;
    public static final int GL_DECR_WRAP = 0x8508;
    public static final int GL_VENDOR = 0x1F00;
    public static final int GL_RENDERER = 0x1F01;
    public static final int GL_VERSION = 0x1F02;
    public static final int GL_EXTENSIONS = 0x1F03;
    public static final int GL_NEAREST = 0x2600;
    public static final int GL_LINEAR = 0x2601;
    public static final int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
    public static final int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
    public static final int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
    public static final int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
    public static final int GL_TEXTURE_MAG_FILTER = 0x2800;
    public static final int GL_TEXTURE_MIN_FILTER = 0x2801;
    public static final int GL_TEXTURE_WRAP_S = 0x2802;
    public static final int GL_TEXTURE_WRAP_T = 0x2803;
    public static final int GL_TEXTURE = 0x1702;
    public static final int GL_TEXTURE_CUBE_MAP = 0x8513;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
    public static final int GL_TEXTURE0 = 0x84C0;
    public static final int GL_TEXTURE1 = 0x84C1;
    public static final int GL_TEXTURE2 = 0x84C2;
    public static final int GL_TEXTURE3 = 0x84C3;
    public static final int GL_TEXTURE4 = 0x84C4;
    public static final int GL_TEXTURE5 = 0x84C5;
    public static final int GL_TEXTURE6 = 0x84C6;
    public static final int GL_TEXTURE7 = 0x84C7;
    public static final int GL_TEXTURE8 = 0x84C8;
    public static final int GL_TEXTURE9 = 0x84C9;
    public static final int GL_TEXTURE10 = 0x84CA;
    public static final int GL_TEXTURE11 = 0x84CB;
    public static final int GL_TEXTURE12 = 0x84CC;
    public static final int GL_TEXTURE13 = 0x84CD;
    public static final int GL_TEXTURE14 = 0x84CE;
    public static final int GL_TEXTURE15 = 0x84CF;
    public static final int GL_TEXTURE16 = 0x84D0;
    public static final int GL_TEXTURE17 = 0x84D1;
    public static final int GL_TEXTURE18 = 0x84D2;
    public static final int GL_TEXTURE19 = 0x84D3;
    public static final int GL_TEXTURE20 = 0x84D4;
    public static final int GL_TEXTURE21 = 0x84D5;
    public static final int GL_TEXTURE22 = 0x84D6;
    public static final int GL_TEXTURE23 = 0x84D7;
    public static final int GL_TEXTURE24 = 0x84D8;
    public static final int GL_TEXTURE25 = 0x84D9;
    public static final int GL_TEXTURE26 = 0x84DA;
    public static final int GL_TEXTURE27 = 0x84DB;
    public static final int GL_TEXTURE28 = 0x84DC;
    public static final int GL_TEXTURE29 = 0x84DD;
    public static final int GL_TEXTURE30 = 0x84DE;
    public static final int GL_TEXTURE31 = 0x84DF;
    public static final int GL_ACTIVE_TEXTURE = 0x84E0;
    public static final int GL_REPEAT = 0x2901;
    public static final int GL_CLAMP_TO_EDGE = 0x812F;
    public static final int GL_MIRRORED_REPEAT = 0x8370;
    public static final int GL_FLOAT_VEC2 = 0x8B50;
    public static final int GL_FLOAT_VEC3 = 0x8B51;
    public static final int GL_FLOAT_VEC4 = 0x8B52;
    public static final int GL_INT_VEC2 = 0x8B53;
    public static final int GL_INT_VEC3 = 0x8B54;
    public static final int GL_INT_VEC4 = 0x8B55;
    public static final int GL_BOOL = 0x8B56;
    public static final int GL_BOOL_VEC2 = 0x8B57;
    public static final int GL_BOOL_VEC3 = 0x8B58;
    public static final int GL_BOOL_VEC4 = 0x8B59;
    public static final int GL_FLOAT_MAT2 = 0x8B5A;
    public static final int GL_FLOAT_MAT3 = 0x8B5B;
    public static final int GL_FLOAT_MAT4 = 0x8B5C;
    public static final int GL_SAMPLER_2D = 0x8B5E;
    public static final int GL_SAMPLER_CUBE = 0x8B60;
    public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
    public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
    public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
    public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
    public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
    public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
    public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
    public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
    public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
    public static final int GL_COMPILE_STATUS = 0x8B81;
    public static final int GL_INFO_LOG_LENGTH = 0x8B84;
    public static final int GL_SHADER_SOURCE_LENGTH = 0x8B88;
    public static final int GL_SHADER_COMPILER = 0x8DFA;
    public static final int GL_SHADER_BINARY_FORMATS = 0x8DF8;
    public static final int GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
    public static final int GL_LOW_FLOAT = 0x8DF0;
    public static final int GL_MEDIUM_FLOAT = 0x8DF1;
    public static final int GL_HIGH_FLOAT = 0x8DF2;
    public static final int GL_LOW_INT = 0x8DF3;
    public static final int GL_MEDIUM_INT = 0x8DF4;
    public static final int GL_HIGH_INT = 0x8DF5;
    public static final int GL_FRAMEBUFFER = 0x8D40;
    public static final int GL_RENDERBUFFER = 0x8D41;
    public static final int GL_RGBA4 = 0x8056;
    public static final int GL_RGB5_A1 = 0x8057;
    public static final int GL_RGB565 = 0x8D62;
    public static final int GL_DEPTH_COMPONENT16 = 0x81A5;
    public static final int GL_STENCIL_INDEX8 = 0x8D48;
    public static final int GL_RENDERBUFFER_WIDTH = 0x8D42;
    public static final int GL_RENDERBUFFER_HEIGHT = 0x8D43;
    public static final int GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
    public static final int GL_RENDERBUFFER_RED_SIZE = 0x8D50;
    public static final int GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
    public static final int GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
    public static final int GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
    public static final int GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
    public static final int GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
    public static final int GL_COLOR_ATTACHMENT0 = 0x8CE0;
    public static final int GL_DEPTH_ATTACHMENT = 0x8D00;
    public static final int GL_STENCIL_ATTACHMENT = 0x8D20;
    public static final int GL_NONE = 0;
    public static final int GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
    public static final int GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
    public static final int GL_FRAMEBUFFER_BINDING = 0x8CA6;
    public static final int GL_RENDERBUFFER_BINDING = 0x8CA7;
    public static final int GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
    public static final int GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
    public static final int GL_READ_BUFFER = 0x0C02;
    public static final int GL_UNPACK_ROW_LENGTH = 0x0CF2;
    public static final int GL_UNPACK_SKIP_ROWS = 0x0CF3;
    public static final int GL_UNPACK_SKIP_PIXELS = 0x0CF4;
    public static final int GL_PACK_ROW_LENGTH = 0x0D02;
    public static final int GL_PACK_SKIP_ROWS = 0x0D03;
    public static final int GL_PACK_SKIP_PIXELS = 0x0D04;
    public static final int GL_COLOR = 0x1800;
    public static final int GL_DEPTH = 0x1801;
    public static final int GL_STENCIL = 0x1802;
    public static final int GL_RED = 0x1903;
    public static final int GL_RGB8 = 0x8051;
    public static final int GL_RGBA8 = 0x8058;
    public static final int GL_RGB10_A2 = 0x8059;
    public static final int GL_TEXTURE_BINDING_3D = 0x806A;
    public static final int GL_UNPACK_SKIP_IMAGES = 0x806D;
    public static final int GL_UNPACK_IMAGE_HEIGHT = 0x806E;
    public static final int GL_TEXTURE_3D = 0x806F;
    public static final int GL_TEXTURE_WRAP_R = 0x8072;
    public static final int GL_MAX_3D_TEXTURE_SIZE = 0x8073;
    public static final int GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
    public static final int GL_MAX_ELEMENTS_VERTICES = 0x80E8;
    public static final int GL_MAX_ELEMENTS_INDICES = 0x80E9;
    public static final int GL_TEXTURE_MIN_LOD = 0x813A;
    public static final int GL_TEXTURE_MAX_LOD = 0x813B;
    public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
    public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
    public static final int GL_MIN = 0x8007;
    public static final int GL_MAX = 0x8008;
    public static final int GL_DEPTH_COMPONENT24 = 0x81A6;
    public static final int GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
    public static final int GL_TEXTURE_COMPARE_MODE = 0x884C;
    public static final int GL_TEXTURE_COMPARE_FUNC = 0x884D;
    public static final int GL_CURRENT_QUERY = 0x8865;
    public static final int GL_QUERY_RESULT = 0x8866;
    public static final int GL_QUERY_RESULT_AVAILABLE = 0x8867;
    public static final int GL_BUFFER_MAPPED = 0x88BC;
    public static final int GL_BUFFER_MAP_POINTER = 0x88BD;
    public static final int GL_STREAM_READ = 0x88E1;
    public static final int GL_STREAM_COPY = 0x88E2;
    public static final int GL_STATIC_READ = 0x88E5;
    public static final int GL_STATIC_COPY = 0x88E6;
    public static final int GL_DYNAMIC_READ = 0x88E9;
    public static final int GL_DYNAMIC_COPY = 0x88EA;
    public static final int GL_MAX_DRAW_BUFFERS = 0x8824;
    public static final int GL_DRAW_BUFFER0 = 0x8825;
    public static final int GL_DRAW_BUFFER1 = 0x8826;
    public static final int GL_DRAW_BUFFER2 = 0x8827;
    public static final int GL_DRAW_BUFFER3 = 0x8828;
    public static final int GL_DRAW_BUFFER4 = 0x8829;
    public static final int GL_DRAW_BUFFER5 = 0x882A;
    public static final int GL_DRAW_BUFFER6 = 0x882B;
    public static final int GL_DRAW_BUFFER7 = 0x882C;
    public static final int GL_DRAW_BUFFER8 = 0x882D;
    public static final int GL_DRAW_BUFFER9 = 0x882E;
    public static final int GL_DRAW_BUFFER10 = 0x882F;
    public static final int GL_DRAW_BUFFER11 = 0x8830;
    public static final int GL_DRAW_BUFFER12 = 0x8831;
    public static final int GL_DRAW_BUFFER13 = 0x8832;
    public static final int GL_DRAW_BUFFER14 = 0x8833;
    public static final int GL_DRAW_BUFFER15 = 0x8834;
    public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
    public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
    public static final int GL_SAMPLER_3D = 0x8B5F;
    public static final int GL_SAMPLER_2D_SHADOW = 0x8B62;
    public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
    public static final int GL_PIXEL_PACK_BUFFER = 0x88EB;
    public static final int GL_PIXEL_UNPACK_BUFFER = 0x88EC;
    public static final int GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
    public static final int GL_FLOAT_MAT2x3 = 0x8B65;
    public static final int GL_FLOAT_MAT2x4 = 0x8B66;
    public static final int GL_FLOAT_MAT3x2 = 0x8B67;
    public static final int GL_FLOAT_MAT3x4 = 0x8B68;
    public static final int GL_FLOAT_MAT4x2 = 0x8B69;
    public static final int GL_FLOAT_MAT4x3 = 0x8B6A;
    public static final int GL_SRGB = 0x8C40;
    public static final int GL_SRGB8 = 0x8C41;
    public static final int GL_SRGB8_ALPHA8 = 0x8C43;
    public static final int GL_COMPARE_REF_TO_TEXTURE = 0x884E;
    public static final int GL_MAJOR_VERSION = 0x821B;
    public static final int GL_MINOR_VERSION = 0x821C;
    public static final int GL_NUM_EXTENSIONS = 0x821D;
    public static final int GL_RGBA32F = 0x8814;
    public static final int GL_RGB32F = 0x8815;
    public static final int GL_RGBA16F = 0x881A;
    public static final int GL_RGB16F = 0x881B;
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
    public static final int GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
    public static final int GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
    public static final int GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
    public static final int GL_MAX_VARYING_COMPONENTS = 0x8B4B;
    public static final int GL_TEXTURE_2D_ARRAY = 0x8C1A;
    public static final int GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
    public static final int GL_R11F_G11F_B10F = 0x8C3A;
    public static final int GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
    public static final int GL_RGB9_E5 = 0x8C3D;
    public static final int GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
    public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
    public static final int GL_RASTERIZER_DISCARD = 0x8C89;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
    public static final int GL_INTERLEAVED_ATTRIBS = 0x8C8C;
    public static final int GL_SEPARATE_ATTRIBS = 0x8C8D;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
    public static final int GL_RGBA32UI = 0x8D70;
    public static final int GL_RGB32UI = 0x8D71;
    public static final int GL_RGBA16UI = 0x8D76;
    public static final int GL_RGB16UI = 0x8D77;
    public static final int GL_RGBA8UI = 0x8D7C;
    public static final int GL_RGB8UI = 0x8D7D;
    public static final int GL_RGBA32I = 0x8D82;
    public static final int GL_RGB32I = 0x8D83;
    public static final int GL_RGBA16I = 0x8D88;
    public static final int GL_RGB16I = 0x8D89;
    public static final int GL_RGBA8I = 0x8D8E;
    public static final int GL_RGB8I = 0x8D8F;
    public static final int GL_RED_INTEGER = 0x8D94;
    public static final int GL_RGB_INTEGER = 0x8D98;
    public static final int GL_RGBA_INTEGER = 0x8D99;
    public static final int GL_SAMPLER_2D_ARRAY = 0x8DC1;
    public static final int GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
    public static final int GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
    public static final int GL_UNSIGNED_INT_VEC2 = 0x8DC6;
    public static final int GL_UNSIGNED_INT_VEC3 = 0x8DC7;
    public static final int GL_UNSIGNED_INT_VEC4 = 0x8DC8;
    public static final int GL_INT_SAMPLER_2D = 0x8DCA;
    public static final int GL_INT_SAMPLER_3D = 0x8DCB;
    public static final int GL_INT_SAMPLER_CUBE = 0x8DCC;
    public static final int GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
    public static final int GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
    public static final int GL_BUFFER_ACCESS_FLAGS = 0x911F;
    public static final int GL_BUFFER_MAP_LENGTH = 0x9120;
    public static final int GL_BUFFER_MAP_OFFSET = 0x9121;
    public static final int GL_DEPTH_COMPONENT32F = 0x8CAC;
    public static final int GL_DEPTH32F_STENCIL8 = 0x8CAD;
    public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
    public static final int GL_FRAMEBUFFER_DEFAULT = 0x8218;
    public static final int GL_FRAMEBUFFER_UNDEFINED = 0x8219;
    public static final int GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
    public static final int GL_DEPTH_STENCIL = 0x84F9;
    public static final int GL_UNSIGNED_INT_24_8 = 0x84FA;
    public static final int GL_DEPTH24_STENCIL8 = 0x88F0;
    public static final int GL_UNSIGNED_NORMALIZED = 0x8C17;
    public static final int GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
    public static final int GL_READ_FRAMEBUFFER = 0x8CA8;
    public static final int GL_DRAW_FRAMEBUFFER = 0x8CA9;
    public static final int GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
    public static final int GL_RENDERBUFFER_SAMPLES = 0x8CAB;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
    public static final int GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
    public static final int GL_COLOR_ATTACHMENT1 = 0x8CE1;
    public static final int GL_COLOR_ATTACHMENT2 = 0x8CE2;
    public static final int GL_COLOR_ATTACHMENT3 = 0x8CE3;
    public static final int GL_COLOR_ATTACHMENT4 = 0x8CE4;
    public static final int GL_COLOR_ATTACHMENT5 = 0x8CE5;
    public static final int GL_COLOR_ATTACHMENT6 = 0x8CE6;
    public static final int GL_COLOR_ATTACHMENT7 = 0x8CE7;
    public static final int GL_COLOR_ATTACHMENT8 = 0x8CE8;
    public static final int GL_COLOR_ATTACHMENT9 = 0x8CE9;
    public static final int GL_COLOR_ATTACHMENT10 = 0x8CEA;
    public static final int GL_COLOR_ATTACHMENT11 = 0x8CEB;
    public static final int GL_COLOR_ATTACHMENT12 = 0x8CEC;
    public static final int GL_COLOR_ATTACHMENT13 = 0x8CED;
    public static final int GL_COLOR_ATTACHMENT14 = 0x8CEE;
    public static final int GL_COLOR_ATTACHMENT15 = 0x8CEF;
    public static final int GL_COLOR_ATTACHMENT16 = 0x8CF0;
    public static final int GL_COLOR_ATTACHMENT17 = 0x8CF1;
    public static final int GL_COLOR_ATTACHMENT18 = 0x8CF2;
    public static final int GL_COLOR_ATTACHMENT19 = 0x8CF3;
    public static final int GL_COLOR_ATTACHMENT20 = 0x8CF4;
    public static final int GL_COLOR_ATTACHMENT21 = 0x8CF5;
    public static final int GL_COLOR_ATTACHMENT22 = 0x8CF6;
    public static final int GL_COLOR_ATTACHMENT23 = 0x8CF7;
    public static final int GL_COLOR_ATTACHMENT24 = 0x8CF8;
    public static final int GL_COLOR_ATTACHMENT25 = 0x8CF9;
    public static final int GL_COLOR_ATTACHMENT26 = 0x8CFA;
    public static final int GL_COLOR_ATTACHMENT27 = 0x8CFB;
    public static final int GL_COLOR_ATTACHMENT28 = 0x8CFC;
    public static final int GL_COLOR_ATTACHMENT29 = 0x8CFD;
    public static final int GL_COLOR_ATTACHMENT30 = 0x8CFE;
    public static final int GL_COLOR_ATTACHMENT31 = 0x8CFF;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
    public static final int GL_MAX_SAMPLES = 0x8D57;
    public static final int GL_HALF_FLOAT = 0x140B;
    public static final int GL_MAP_READ_BIT = 0x0001;
    public static final int GL_MAP_WRITE_BIT = 0x0002;
    public static final int GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
    public static final int GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
    public static final int GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
    public static final int GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
    public static final int GL_RG = 0x8227;
    public static final int GL_RG_INTEGER = 0x8228;
    public static final int GL_R8 = 0x8229;
    public static final int GL_RG8 = 0x822B;
    public static final int GL_R16F = 0x822D;
    public static final int GL_R32F = 0x822E;
    public static final int GL_RG16F = 0x822F;
    public static final int GL_RG32F = 0x8230;
    public static final int GL_R8I = 0x8231;
    public static final int GL_R8UI = 0x8232;
    public static final int GL_R16I = 0x8233;
    public static final int GL_R16UI = 0x8234;
    public static final int GL_R32I = 0x8235;
    public static final int GL_R32UI = 0x8236;
    public static final int GL_RG8I = 0x8237;
    public static final int GL_RG8UI = 0x8238;
    public static final int GL_RG16I = 0x8239;
    public static final int GL_RG16UI = 0x823A;
    public static final int GL_RG32I = 0x823B;
    public static final int GL_RG32UI = 0x823C;
    public static final int GL_VERTEX_ARRAY_BINDING = 0x85B5;
    public static final int GL_R8_SNORM = 0x8F94;
    public static final int GL_RG8_SNORM = 0x8F95;
    public static final int GL_RGB8_SNORM = 0x8F96;
    public static final int GL_RGBA8_SNORM = 0x8F97;
    public static final int GL_SIGNED_NORMALIZED = 0x8F9C;
    public static final int GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
    public static final int GL_COPY_READ_BUFFER = 0x8F36;
    public static final int GL_COPY_WRITE_BUFFER = 0x8F37;
    public static final int GL_COPY_READ_BUFFER_BINDING = 0x8F36;
    public static final int GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
    public static final int GL_UNIFORM_BUFFER = 0x8A11;
    public static final int GL_UNIFORM_BUFFER_BINDING = 0x8A28;
    public static final int GL_UNIFORM_BUFFER_START = 0x8A29;
    public static final int GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
    public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
    public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
    public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
    public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
    public static final int GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
    public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
    public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
    public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
    public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
    public static final int GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
    public static final int GL_UNIFORM_TYPE = 0x8A37;
    public static final int GL_UNIFORM_SIZE = 0x8A38;
    public static final int GL_UNIFORM_NAME_LENGTH = 0x8A39;
    public static final int GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
    public static final int GL_UNIFORM_OFFSET = 0x8A3B;
    public static final int GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
    public static final int GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
    public static final int GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
    public static final int GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
    public static final int GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
    public static final int GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
    public static final long GL_INVALID_INDEX = 0xFFFFFFFFL;
    public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
    public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
    public static final int GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
    public static final int GL_OBJECT_TYPE = 0x9112;
    public static final int GL_SYNC_CONDITION = 0x9113;
    public static final int GL_SYNC_STATUS = 0x9114;
    public static final int GL_SYNC_FLAGS = 0x9115;
    public static final int GL_SYNC_FENCE = 0x9116;
    public static final int GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
    public static final int GL_UNSIGNALED = 0x9118;
    public static final int GL_SIGNALED = 0x9119;
    public static final int GL_ALREADY_SIGNALED = 0x911A;
    public static final int GL_TIMEOUT_EXPIRED = 0x911B;
    public static final int GL_CONDITION_SATISFIED = 0x911C;
    public static final int GL_WAIT_FAILED = 0x911D;
    public static final int GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
    public static final long GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFL;
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
    public static final int GL_ANY_SAMPLES_PASSED = 0x8C2F;
    public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
    public static final int GL_SAMPLER_BINDING = 0x8919;
    public static final int GL_RGB10_A2UI = 0x906F;
    public static final int GL_TEXTURE_SWIZZLE_R = 0x8E42;
    public static final int GL_TEXTURE_SWIZZLE_G = 0x8E43;
    public static final int GL_TEXTURE_SWIZZLE_B = 0x8E44;
    public static final int GL_TEXTURE_SWIZZLE_A = 0x8E45;
    public static final int GL_GREEN = 0x1904;
    public static final int GL_BLUE = 0x1905;
    public static final int GL_INT_2_10_10_10_REV = 0x8D9F;
    public static final int GL_TRANSFORM_FEEDBACK = 0x8E22;
    public static final int GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
    public static final int GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
    public static final int GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
    public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
    public static final int GL_PROGRAM_BINARY_LENGTH = 0x8741;
    public static final int GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
    public static final int GL_PROGRAM_BINARY_FORMATS = 0x87FF;
    public static final int GL_COMPRESSED_R11_EAC = 0x9270;
    public static final int GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
    public static final int GL_COMPRESSED_RG11_EAC = 0x9272;
    public static final int GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
    public static final int GL_COMPRESSED_RGB8_ETC2 = 0x9274;
    public static final int GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
    public static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
    public static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
    public static final int GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
    public static final int GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
    public static final int GL_MAX_ELEMENT_INDEX = 0x8D6B;
    public static final int GL_NUM_SAMPLE_COUNTS = 0x9380;
    public static final int GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
    public static final int GL_ES_VERSION_2_0 = 1;
    public static final int GL_ES_VERSION_3_0 = 1;

    //public static native int gladLoadGLES2Loader();// //int
    public static native void glActiveTexture(int ptexture); //GLenum, //void
    public static native void glAttachShader(int pprogram, int pshader); //GLuint,GLuint, //void
    public static native void glBindAttribLocation(int pprogram, int pindex, byte[] pname); //GLuint,GLuint,const GLchar*, //void
    public static native void glBindBuffer(int ptarget, int pbuffer); //GLenum,GLuint, //void
    public static native void glBindFramebuffer(int ptarget, int pframebuffer); //GLenum,GLuint, //void
    public static native void glBindRenderbuffer(int ptarget, int prenderbuffer); //GLenum,GLuint, //void
    public static native void glBindTexture(int ptarget, int ptexture); //GLenum,GLuint, //void
    public static native void glBlendColor(float pred, float pgreen, float pblue, float palpha); //GLfloat,GLfloat,GLfloat,GLfloat, //void
    public static native void glBlendEquation(int pmode); //GLenum, //void
    public static native void glBlendEquationSeparate(int pmodeRGB, int pmodeAlpha); //GLenum,GLenum, //void
    public static native void glBlendFunc(int psfactor, int pdfactor); //GLenum,GLenum, //void
    public static native void glBlendFuncSeparate(int psfactorRGB, int pdfactorRGB, int psfactorAlpha, int pdfactorAlpha); //GLenum,GLenum,GLenum,GLenum, //void
    public static native void glBufferData(int ptarget, long psize, Object pdata, int offset_pdata, int pusage); //GLenum,GLsizeiptr,const void*,GLenum, //void
    public static native void glBufferSubData(int ptarget, long poffset, long psize, Object pdata, int offset_pdata); //GLenum,GLintptr,GLsizeiptr,const void*, //void
    public static native int glCheckFramebufferStatus(int ptarget); //GLenum, //GLenum
    public static native void glClear(int pmask); //GLbitfield, //void
    public static native void glClearColor(float pred, float pgreen, float pblue, float palpha); //GLfloat,GLfloat,GLfloat,GLfloat, //void
    public static native void glClearDepthf(float pd); //GLfloat, //void
    public static native void glClearStencil(int ps); //GLint, //void
    public static native void glColorMask(int pred, int pgreen, int pblue, int palpha); //GLboolean,GLboolean,GLboolean,GLboolean, //void
    public static native void glCompileShader(int pshader); //GLuint, //void
    public static native void glCompressedTexImage2D(int ptarget, int plevel, int pinternalformat, int pwidth, int pheight, int pborder, int pimageSize, Object pdata, int offset_pdata); //GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void*, //void
    public static native void glCompressedTexSubImage2D(int ptarget, int plevel, int pxoffset, int pyoffset, int pwidth, int pheight, int pformat, int pimageSize, Object pdata, int offset_pdata); //GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void*, //void
    public static native void glCopyTexImage2D(int ptarget, int plevel, int pinternalformat, int px, int py, int pwidth, int pheight, int pborder); //GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint, //void
    public static native void glCopyTexSubImage2D(int ptarget, int plevel, int pxoffset, int pyoffset, int px, int py, int pwidth, int pheight); //GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei, //void
    public static native int glCreateProgram(); //void, //GLuint
    public static native int glCreateShader(int ptype); //GLenum, //GLuint
    public static native void glCullFace(int pmode); //GLenum, //void
    public static native void glDeleteBuffers(int pn, int[] pbuffers, int offset_pbuffers); //GLsizei,const GLuint*, //void
    public static native void glDeleteFramebuffers(int pn, int[] pframebuffers, int offset_pframebuffers); //GLsizei,const GLuint*, //void
    public static native void glDeleteProgram(int pprogram); //GLuint, //void
    public static native void glDeleteRenderbuffers(int pn, int[] prenderbuffers, int offset_prenderbuffers); //GLsizei,const GLuint*, //void
    public static native void glDeleteShader(int pshader); //GLuint, //void
    public static native void glDeleteTextures(int pn, int[] ptextures, int offset_ptextures); //GLsizei,const GLuint*, //void
    public static native void glDepthFunc(int pfunc); //GLenum, //void
    public static native void glDepthMask(int pflag); //GLboolean, //void
    public static native void glDepthRangef(float pn, float pf); //GLfloat,GLfloat, //void
    public static native void glDetachShader(int pprogram, int pshader); //GLuint,GLuint, //void
    public static native void glDisable(int pcap); //GLenum, //void
    public static native void glDisableVertexAttribArray(int pindex); //GLuint, //void
    public static native void glDrawArrays(int pmode, int pfirst, int pcount); //GLenum,GLint,GLsizei, //void
    public static native void glDrawElements(int pmode, int pcount, int ptype, Object pindices, int offset_pindices); //GLenum,GLsizei,GLenum,const void*, //void
    public static native void glEnable(int pcap); //GLenum, //void
    public static native void glEnableVertexAttribArray(int pindex); //GLuint, //void
    public static native void glFinish(); //void, //void
    public static native void glFlush(); //void, //void
    public static native void glFramebufferRenderbuffer(int ptarget, int pattachment, int prenderbuffertarget, int prenderbuffer); //GLenum,GLenum,GLenum,GLuint, //void
    public static native void glFramebufferTexture2D(int ptarget, int pattachment, int ptextarget, int ptexture, int plevel); //GLenum,GLenum,GLenum,GLuint,GLint, //void
    public static native void glFrontFace(int pmode); //GLenum, //void
    public static native void glGenBuffers(int pn, int[] pbuffers, int offset_pbuffers); //GLsizei,GLuint*, //void
    public static native void glGenerateMipmap(int ptarget); //GLenum, //void
    public static native void glGenFramebuffers(int pn, int[] pframebuffers, int offset_pframebuffers); //GLsizei,GLuint*, //void
    public static native void glGenRenderbuffers(int pn, int[] prenderbuffers, int offset_prenderbuffers); //GLsizei,GLuint*, //void
    public static native void glGenTextures(int pn, int[] ptextures, int offset_ptextures); //GLsizei,GLuint*, //void
    public static native void glGetActiveAttrib(int pprogram, int pindex, int pbufSize, int[] plength, int offset_plength, int[] psize, int offset_psize, int[] ptype, int offset_ptype, byte[] pname); //GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*, //void
    public static native void glGetActiveUniform(int pprogram, int pindex, int pbufSize, int[] plength, int offset_plength, int[] psize, int offset_psize, int[] ptype, int offset_ptype, byte[] pname); //GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*, //void
    public static native void glGetAttachedShaders(int pprogram, int pmaxCount, int[] pcount, int offset_pcount, int[] pshaders, int offset_pshaders); //GLuint,GLsizei,GLsizei*,GLuint*, //void
    public static native int glGetAttribLocation(int pprogram, byte[] pname); //GLuint,const GLchar*, //GLint
    public static native void glGetBooleanv(int ppname, int[] pdata, int offset_pdata); //GLenum,GLboolean*, //void
    public static native void glGetBufferParameteriv(int ptarget, int ppname, int[] pparams, int offset_pparams); //GLenum,GLenum,GLint*, //void
    public static native int glGetError(); //void, //GLenum
    public static native void glGetFloatv(int ppname, float[] pdata, int offset_pdata); //GLenum,GLfloat*, //void
    public static native void glGetFramebufferAttachmentParameteriv(int ptarget, int pattachment, int ppname, int[] pparams, int offset_pparams); //GLenum,GLenum,GLenum,GLint*, //void
    public static native void glGetIntegerv(int ppname, int[] pdata, int offset_pdata); //GLenum,GLint*, //void
    public static native void glGetProgramiv(int pprogram, int ppname, int[] pparams, int offset_pparams); //GLuint,GLenum,GLint*, //void
    public static native void glGetProgramInfoLog(int pprogram, int pbufSize, int[] plength, int offset_plength, byte[] pinfoLog); //GLuint,GLsizei,GLsizei*,GLchar*, //void
    public static native void glGetRenderbufferParameteriv(int ptarget, int ppname, int[] pparams, int offset_pparams); //GLenum,GLenum,GLint*, //void
    public static native void glGetShaderiv(int pshader, int ppname, int[] pparams, int offset_pparams); //GLuint,GLenum,GLint*, //void
    public static native void glGetShaderInfoLog(int pshader, int pbufSize, int[] plength, int offset_plength, byte[] pinfoLog); //GLuint,GLsizei,GLsizei*,GLchar*, //void
    public static native void glGetShaderPrecisionFormat(int pshadertype, int pprecisiontype, int[] prange, int offset_prange, int[] pprecision, int offset_pprecision); //GLenum,GLenum,GLint*,GLint*, //void
    public static native void glGetShaderSource(int pshader, int pbufSize, int[] plength, int offset_plength, byte[] psource); //GLuint,GLsizei,GLsizei*,GLchar*, //void
    public static native byte[] glGetString(int pname); //GLenum, //const GLubyte*
    public static native void glGetTexParameterfv(int ptarget, int ppname, float[] pparams, int offset_pparams); //GLenum,GLenum,GLfloat*, //void
    public static native void glGetTexParameteriv(int ptarget, int ppname, int[] pparams, int offset_pparams); //GLenum,GLenum,GLint*, //void
    public static native void glGetUniformfv(int pprogram, int plocation, float[] pparams, int offset_pparams); //GLuint,GLint,GLfloat*, //void
    public static native void glGetUniformiv(int pprogram, int plocation, int[] pparams, int offset_pparams); //GLuint,GLint,GLint*, //void
    public static native int glGetUniformLocation(int pprogram, byte[] pname); //GLuint,const GLchar*, //GLint
    public static native void glGetVertexAttribfv(int pindex, int ppname, float[] pparams, int offset_pparams); //GLuint,GLenum,GLfloat*, //void
    public static native void glGetVertexAttribiv(int pindex, int ppname, int[] pparams, int offset_pparams); //GLuint,GLenum,GLint*, //void
    public static native void glGetVertexAttribPointerv(int pindex, int ppname, Object[] ppointer); //GLuint,GLenum,void**, //void
    public static native void glHint(int ptarget, int pmode); //GLenum,GLenum, //void
    public static native int glIsBuffer(int pbuffer); //GLuint, //GLboolean
    public static native int glIsEnabled(int pcap); //GLenum, //GLboolean
    public static native int glIsFramebuffer(int pframebuffer); //GLuint, //GLboolean
    public static native int glIsProgram(int pprogram); //GLuint, //GLboolean
    public static native int glIsRenderbuffer(int prenderbuffer); //GLuint, //GLboolean
    public static native int glIsShader(int pshader); //GLuint, //GLboolean
    public static native int glIsTexture(int ptexture); //GLuint, //GLboolean
    public static native void glLineWidth(float pwidth); //GLfloat, //void
    public static native void glLinkProgram(int pprogram); //GLuint, //void
    public static native void glPixelStorei(int ppname, int pparam); //GLenum,GLint, //void
    public static native void glPolygonOffset(float pfactor, float punits); //GLfloat,GLfloat, //void
    public static native void glReadPixels(int px, int py, int pwidth, int pheight, int pformat, int ptype, Object ppixels, int offset_ppixels); //GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,void*, //void
    public static native void glReleaseShaderCompiler(); //void, //void
    public static native void glRenderbufferStorage(int ptarget, int pinternalformat, int pwidth, int pheight); //GLenum,GLenum,GLsizei,GLsizei, //void
    public static native void glSampleCoverage(float pvalue, int pinvert); //GLfloat,GLboolean, //void
    public static native void glScissor(int px, int py, int pwidth, int pheight); //GLint,GLint,GLsizei,GLsizei, //void
    public static native void glShaderBinary(int pcount, int[] pshaders, int offset_pshaders, int pbinaryformat, Object pbinary, int offset_pbinary, int plength); //GLsizei,const GLuint*,GLenum,const void*,GLsizei, //void
    public static native void glShaderSource(int pshader, int pcount, byte[][] pstring, int[] plength, int offset_plength); //GLuint,GLsizei,const GLchar*const*,const GLint*, //void
    public static native void glStencilFunc(int pfunc, int pref, int pmask); //GLenum,GLint,GLuint, //void
    public static native void glStencilFuncSeparate(int pface, int pfunc, int pref, int pmask); //GLenum,GLenum,GLint,GLuint, //void
    public static native void glStencilMask(int pmask); //GLuint, //void
    public static native void glStencilMaskSeparate(int pface, int pmask); //GLenum,GLuint, //void
    public static native void glStencilOp(int pfail, int pzfail, int pzpass); //GLenum,GLenum,GLenum, //void
    public static native void glStencilOpSeparate(int pface, int psfail, int pdpfail, int pdppass); //GLenum,GLenum,GLenum,GLenum, //void
    public static native void glTexImage2D(int ptarget, int plevel, int pinternalformat, int pwidth, int pheight, int pborder, int pformat, int ptype, Object ppixels, int offset_ppixels); //GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const void*, //void
    public static native void glTexParameterf(int ptarget, int ppname, float pparam); //GLenum,GLenum,GLfloat, //void
    public static native void glTexParameterfv(int ptarget, int ppname, float[] pparams, int offset_pparams); //GLenum,GLenum,const GLfloat*, //void
    public static native void glTexParameteri(int ptarget, int ppname, int pparam); //GLenum,GLenum,GLint, //void
    public static native void glTexParameteriv(int ptarget, int ppname, int[] pparams, int offset_pparams); //GLenum,GLenum,const GLint*, //void
    public static native void glTexSubImage2D(int ptarget, int plevel, int pxoffset, int pyoffset, int pwidth, int pheight, int pformat, int ptype, Object ppixels, int offset_ppixels); //GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const void*, //void
    public static native void glUniform1f(int plocation, float pv0); //GLint,GLfloat, //void
    public static native void glUniform1fv(int plocation, int pcount, float[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLfloat*, //void
    public static native void glUniform1i(int plocation, int pv0); //GLint,GLint, //void
    public static native void glUniform1iv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLint*, //void
    public static native void glUniform2f(int plocation, float pv0, float pv1); //GLint,GLfloat,GLfloat, //void
    public static native void glUniform2fv(int plocation, int pcount, float[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLfloat*, //void
    public static native void glUniform2i(int plocation, int pv0, int pv1); //GLint,GLint,GLint, //void
    public static native void glUniform2iv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLint*, //void
    public static native void glUniform3f(int plocation, float pv0, float pv1, float pv2); //GLint,GLfloat,GLfloat,GLfloat, //void
    public static native void glUniform3fv(int plocation, int pcount, float[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLfloat*, //void
    public static native void glUniform3i(int plocation, int pv0, int pv1, int pv2); //GLint,GLint,GLint,GLint, //void
    public static native void glUniform3iv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLint*, //void
    public static native void glUniform4f(int plocation, float pv0, float pv1, float pv2, float pv3); //GLint,GLfloat,GLfloat,GLfloat,GLfloat, //void
    public static native void glUniform4fv(int plocation, int pcount, float[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLfloat*, //void
    public static native void glUniform4i(int plocation, int pv0, int pv1, int pv2, int pv3); //GLint,GLint,GLint,GLint,GLint, //void
    public static native void glUniform4iv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLint*, //void
    public static native void glUniformMatrix2fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUniformMatrix3fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUniformMatrix4fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUseProgram(int pprogram); //GLuint, //void
    public static native void glValidateProgram(int pprogram); //GLuint, //void
    public static native void glVertexAttrib1f(int pindex, float px); //GLuint,GLfloat, //void
    public static native void glVertexAttrib1fv(int pindex, float[] pv, int offset_pv); //GLuint,const GLfloat*, //void
    public static native void glVertexAttrib2f(int pindex, float px, float py); //GLuint,GLfloat,GLfloat, //void
    public static native void glVertexAttrib2fv(int pindex, float[] pv, int offset_pv); //GLuint,const GLfloat*, //void
    public static native void glVertexAttrib3f(int pindex, float px, float py, float pz); //GLuint,GLfloat,GLfloat,GLfloat, //void
    public static native void glVertexAttrib3fv(int pindex, float[] pv, int offset_pv); //GLuint,const GLfloat*, //void
    public static native void glVertexAttrib4f(int pindex, float px, float py, float pz, float pw); //GLuint,GLfloat,GLfloat,GLfloat,GLfloat, //void
    public static native void glVertexAttrib4fv(int pindex, float[] pv, int offset_pv); //GLuint,const GLfloat*, //void
    public static native void glVertexAttribPointer(int pindex, int psize, int ptype, int pnormalized, int pstride, Object ppointer, int offset_ppointer); //GLuint,GLint,GLenum,GLboolean,GLsizei,const void*, //void
    public static native void glViewport(int px, int py, int pwidth, int pheight); //GLint,GLint,GLsizei,GLsizei, //void
    public static native void glReadBuffer(int psrc); //GLenum, //void
    public static native void glDrawRangeElements(int pmode, int pstart, int pend, int pcount, int ptype, Object pindices, int offset_pindices); //GLenum,GLuint,GLuint,GLsizei,GLenum,const void*, //void
    public static native void glTexImage3D(int ptarget, int plevel, int pinternalformat, int pwidth, int pheight, int pdepth, int pborder, int pformat, int ptype, Object ppixels, int offset_ppixels); //GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,const void*, //void
    public static native void glTexSubImage3D(int ptarget, int plevel, int pxoffset, int pyoffset, int pzoffset, int pwidth, int pheight, int pdepth, int pformat, int ptype, Object ppixels, int offset_ppixels); //GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const void*, //void
    public static native void glCopyTexSubImage3D(int ptarget, int plevel, int pxoffset, int pyoffset, int pzoffset, int px, int py, int pwidth, int pheight); //GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei, //void
    public static native void glCompressedTexImage3D(int ptarget, int plevel, int pinternalformat, int pwidth, int pheight, int pdepth, int pborder, int pimageSize, Object pdata, int offset_pdata); //GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,const void*, //void
    public static native void glCompressedTexSubImage3D(int ptarget, int plevel, int pxoffset, int pyoffset, int pzoffset, int pwidth, int pheight, int pdepth, int pformat, int pimageSize, Object pdata, int offset_pdata); //GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,const void*, //void
    public static native void glGenQueries(int pn, int[] pids, int offset_pids); //GLsizei,GLuint*, //void
    public static native void glDeleteQueries(int pn, int[] pids, int offset_pids); //GLsizei,const GLuint*, //void
    public static native int glIsQuery(int pid); //GLuint, //GLboolean
    public static native void glBeginQuery(int ptarget, int pid); //GLenum,GLuint, //void
    public static native void glEndQuery(int ptarget); //GLenum, //void
    public static native void glGetQueryiv(int ptarget, int ppname, int[] pparams, int offset_pparams); //GLenum,GLenum,GLint*, //void
    public static native void glGetQueryObjectuiv(int pid, int ppname, int[] pparams, int offset_pparams); //GLuint,GLenum,GLuint*, //void
    public static native int glUnmapBuffer(int ptarget); //GLenum, //GLboolean
    public static native void glGetBufferPointerv(int ptarget, int ppname, Object[] pparams); //GLenum,GLenum,void**, //void
    public static native void glDrawBuffers(int pn, int[] pbufs, int offset_pbufs); //GLsizei,const GLenum*, //void
    public static native void glUniformMatrix2x3fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUniformMatrix3x2fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUniformMatrix2x4fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUniformMatrix4x2fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUniformMatrix3x4fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glUniformMatrix4x3fv(int plocation, int pcount, int ptranspose, float[] pvalue, int offset_pvalue); //GLint,GLsizei,GLboolean,const GLfloat*, //void
    public static native void glBlitFramebuffer(int psrcX0, int psrcY0, int psrcX1, int psrcY1, int pdstX0, int pdstY0, int pdstX1, int pdstY1, int pmask, int pfilter); //GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum, //void
    public static native void glRenderbufferStorageMultisample(int ptarget, int psamples, int pinternalformat, int pwidth, int pheight); //GLenum,GLsizei,GLenum,GLsizei,GLsizei, //void
    public static native void glFramebufferTextureLayer(int ptarget, int pattachment, int ptexture, int plevel, int player); //GLenum,GLenum,GLuint,GLint,GLint, //void
    public static native long glMapBufferRange(int ptarget, long poffset, long plength, int paccess); //GLenum,GLintptr,GLsizeiptr,GLbitfield, //void*
    public static native void glFlushMappedBufferRange(int ptarget, long poffset, long plength); //GLenum,GLintptr,GLsizeiptr, //void
    public static native void glBindVertexArray(int parray); //GLuint, //void
    public static native void glDeleteVertexArrays(int pn, int[] parrays, int offset_parrays); //GLsizei,const GLuint*, //void
    public static native void glGenVertexArrays(int pn, int[] parrays, int offset_parrays); //GLsizei,GLuint*, //void
    public static native int glIsVertexArray(int parray); //GLuint, //GLboolean
    public static native void glGetIntegeri_v(int ptarget, int pindex, int[] pdata, int offset_pdata); //GLenum,GLuint,GLint*, //void
    public static native void glBeginTransformFeedback(int pprimitiveMode); //GLenum, //void
    public static native void glEndTransformFeedback(); //void, //void
    public static native void glBindBufferRange(int ptarget, int pindex, int pbuffer, long poffset, long psize); //GLenum,GLuint,GLuint,GLintptr,GLsizeiptr, //void
    public static native void glBindBufferBase(int ptarget, int pindex, int pbuffer); //GLenum,GLuint,GLuint, //void
    public static native void glTransformFeedbackVaryings(int pprogram, int pcount, byte[][] pvaryings, int pbufferMode); //GLuint,GLsizei,const GLchar*const*,GLenum, //void
    public static native void glGetTransformFeedbackVarying(int pprogram, int pindex, int pbufSize, int[] plength, int offset_plength, int[] psize, int offset_psize, int[] ptype, int offset_ptype, byte[] pname); //GLuint,GLuint,GLsizei,GLsizei*,GLsizei*,GLenum*,GLchar*, //void
    public static native void glVertexAttribIPointer(int pindex, int psize, int ptype, int pstride, Object ppointer, int offset_ppointer); //GLuint,GLint,GLenum,GLsizei,const void*, //void
    public static native void glGetVertexAttribIiv(int pindex, int ppname, int[] pparams, int offset_pparams); //GLuint,GLenum,GLint*, //void
    public static native void glGetVertexAttribIuiv(int pindex, int ppname, int[] pparams, int offset_pparams); //GLuint,GLenum,GLuint*, //void
    public static native void glVertexAttribI4i(int pindex, int px, int py, int pz, int pw); //GLuint,GLint,GLint,GLint,GLint, //void
    public static native void glVertexAttribI4ui(int pindex, int px, int py, int pz, int pw); //GLuint,GLuint,GLuint,GLuint,GLuint, //void
    public static native void glVertexAttribI4iv(int pindex, int[] pv, int offset_pv); //GLuint,const GLint*, //void
    public static native void glVertexAttribI4uiv(int pindex, int[] pv, int offset_pv); //GLuint,const GLuint*, //void
    public static native void glGetUniformuiv(int pprogram, int plocation, int[] pparams, int offset_pparams); //GLuint,GLint,GLuint*, //void
    public static native int glGetFragDataLocation(int pprogram, byte[] pname); //GLuint,const GLchar*, //GLint
    public static native void glUniform1ui(int plocation, int pv0); //GLint,GLuint, //void
    public static native void glUniform2ui(int plocation, int pv0, int pv1); //GLint,GLuint,GLuint, //void
    public static native void glUniform3ui(int plocation, int pv0, int pv1, int pv2); //GLint,GLuint,GLuint,GLuint, //void
    public static native void glUniform4ui(int plocation, int pv0, int pv1, int pv2, int pv3); //GLint,GLuint,GLuint,GLuint,GLuint, //void
    public static native void glUniform1uiv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLuint*, //void
    public static native void glUniform2uiv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLuint*, //void
    public static native void glUniform3uiv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLuint*, //void
    public static native void glUniform4uiv(int plocation, int pcount, int[] pvalue, int offset_pvalue); //GLint,GLsizei,const GLuint*, //void
    public static native void glClearBufferiv(int pbuffer, int pdrawbuffer, int[] pvalue, int offset_pvalue); //GLenum,GLint,const GLint*, //void
    public static native void glClearBufferuiv(int pbuffer, int pdrawbuffer, int[] pvalue, int offset_pvalue); //GLenum,GLint,const GLuint*, //void
    public static native void glClearBufferfv(int pbuffer, int pdrawbuffer, float[] pvalue, int offset_pvalue); //GLenum,GLint,const GLfloat*, //void
    public static native void glClearBufferfi(int pbuffer, int pdrawbuffer, float pdepth, int pstencil); //GLenum,GLint,GLfloat,GLint, //void
    public static native byte[] glGetStringi(int pname, int pindex); //GLenum,GLuint, //const GLubyte*
    public static native void glCopyBufferSubData(int preadTarget, int pwriteTarget, long preadOffset, long pwriteOffset, long psize); //GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr, //void
    public static native void glGetUniformIndices(int pprogram, int puniformCount, byte[][] puniformNames, int[] puniformIndices, int offset_puniformIndices); //GLuint,GLsizei,const GLchar*const*,GLuint*, //void
    public static native void glGetActiveUniformsiv(int pprogram, int puniformCount, int[] puniformIndices, int offset_puniformIndices, int ppname, int[] pparams, int offset_pparams); //GLuint,GLsizei,const GLuint*,GLenum,GLint*, //void
    public static native int glGetUniformBlockIndex(int pprogram, byte[] puniformBlockName); //GLuint,const GLchar*, //GLuint
    public static native void glGetActiveUniformBlockiv(int pprogram, int puniformBlockIndex, int ppname, int[] pparams, int offset_pparams); //GLuint,GLuint,GLenum,GLint*, //void
    public static native void glGetActiveUniformBlockName(int pprogram, int puniformBlockIndex, int pbufSize, int[] plength, int offset_plength, byte[] puniformBlockName); //GLuint,GLuint,GLsizei,GLsizei*,GLchar*, //void
    public static native void glUniformBlockBinding(int pprogram, int puniformBlockIndex, int puniformBlockBinding); //GLuint,GLuint,GLuint, //void
    public static native void glDrawArraysInstanced(int pmode, int pfirst, int pcount, int pinstancecount); //GLenum,GLint,GLsizei,GLsizei, //void
    public static native void glDrawElementsInstanced(int pmode, int pcount, int ptype, Object pindices, int offset_pindices, int pinstancecount); //GLenum,GLsizei,GLenum,const void*,GLsizei, //void
    public static native long glFenceSync(int pcondition, int pflags); //GLenum,GLbitfield, //GLsync
    public static native int glIsSync(long psync); //GLsync, //GLboolean
    public static native void glDeleteSync(long psync); //GLsync, //void
    public static native int glClientWaitSync(long psync, int pflags, long ptimeout); //GLsync,GLbitfield,GLuint64, //GLenum
    public static native void glWaitSync(long psync, int pflags, long ptimeout); //GLsync,GLbitfield,GLuint64, //void
    public static native void glGetInteger64v(int ppname, long[] pdata, int offset_pdata); //GLenum,GLint64*, //void
    public static native void glGetSynciv(long psync, int ppname, int pcount, int[] plength, int offset_plength, int[] pvalues, int offset_pvalues); //GLsync,GLenum,GLsizei,GLsizei*,GLint*, //void
    public static native void glGetInteger64i_v(int ptarget, int pindex, long[] pdata, int offset_pdata); //GLenum,GLuint,GLint64*, //void
    public static native void glGetBufferParameteri64v(int ptarget, int ppname, long[] pparams, int offset_pparams); //GLenum,GLenum,GLint64*, //void
    public static native void glGenSamplers(int pcount, int[] psamplers, int offset_psamplers); //GLsizei,GLuint*, //void
    public static native void glDeleteSamplers(int pcount, int[] psamplers, int offset_psamplers); //GLsizei,const GLuint*, //void
    public static native int glIsSampler(int psampler); //GLuint, //GLboolean
    public static native void glBindSampler(int punit, int psampler); //GLuint,GLuint, //void
    public static native void glSamplerParameteri(int psampler, int ppname, int pparam); //GLuint,GLenum,GLint, //void
    public static native void glSamplerParameteriv(int psampler, int ppname, int[] pparam, int offset_pparam); //GLuint,GLenum,const GLint*, //void
    public static native void glSamplerParameterf(int psampler, int ppname, float pparam); //GLuint,GLenum,GLfloat, //void
    public static native void glSamplerParameterfv(int psampler, int ppname, float[] pparam, int offset_pparam); //GLuint,GLenum,const GLfloat*, //void
    public static native void glGetSamplerParameteriv(int psampler, int ppname, int[] pparams, int offset_pparams); //GLuint,GLenum,GLint*, //void
    public static native void glGetSamplerParameterfv(int psampler, int ppname, float[] pparams, int offset_pparams); //GLuint,GLenum,GLfloat*, //void
    public static native void glVertexAttribDivisor(int pindex, int pdivisor); //GLuint,GLuint, //void
    public static native void glBindTransformFeedback(int ptarget, int pid); //GLenum,GLuint, //void
    public static native void glDeleteTransformFeedbacks(int pn, int[] pids, int offset_pids); //GLsizei,const GLuint*, //void
    public static native void glGenTransformFeedbacks(int pn, int[] pids, int offset_pids); //GLsizei,GLuint*, //void
    public static native int glIsTransformFeedback(int pid); //GLuint, //GLboolean
    public static native void glPauseTransformFeedback(); //void, //void
    public static native void glResumeTransformFeedback(); //void, //void
    public static native void glGetProgramBinary(int pprogram, int pbufSize, int[] plength, int offset_plength, int[] pbinaryFormat, int offset_pbinaryFormat, Object pbinary, int offset_pbinary); //GLuint,GLsizei,GLsizei*,GLenum*,void*, //void
    public static native void glProgramBinary(int pprogram, int pbinaryFormat, Object pbinary, int offset_pbinary, int plength); //GLuint,GLenum,const void*,GLsizei, //void
    public static native void glProgramParameteri(int pprogram, int ppname, int pvalue); //GLuint,GLenum,GLint, //void
    public static native void glInvalidateFramebuffer(int ptarget, int pnumAttachments, int[] pattachments, int offset_pattachments); //GLenum,GLsizei,const GLenum*, //void
    public static native void glInvalidateSubFramebuffer(int ptarget, int pnumAttachments, int[] pattachments, int offset_pattachments, int px, int py, int pwidth, int pheight); //GLenum,GLsizei,const GLenum*,GLint,GLint,GLsizei,GLsizei, //void
    public static native void glTexStorage2D(int ptarget, int plevels, int pinternalformat, int pwidth, int pheight); //GLenum,GLsizei,GLenum,GLsizei,GLsizei, //void
    public static native void glTexStorage3D(int ptarget, int plevels, int pinternalformat, int pwidth, int pheight, int pdepth); //GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei, //void
    public static native void glGetInternalformativ(int ptarget, int pinternalformat, int ppname, int pcount, int[] pparams, int offset_pparams); //GLenum,GLenum,GLenum,GLsizei,GLint*, //void

}

